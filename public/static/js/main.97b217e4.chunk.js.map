{"version":3,"sources":["components/Form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","isName","React","useState","task","setTask","e","preventDefault","type","placeholder","name","onChange","value","target","disabled","socket","io","connect","App","setName","setIsName","tasks","setTasks","handleDelete","index","findIndex","t","emit","useEffect","on","prevState","filter","i","className","console","log","onClick","map","publisher","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAEaA,EAAO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAAa,EACpBC,IAAMC,SAAS,IADK,mBACrCC,EADqC,KAC/BC,EAD+B,KAU5C,OACE,0BAAML,SALa,SAAAM,GACnBA,EAAEC,iBACFP,EAASI,KAIP,2BACEI,KAAK,OACLC,YAAY,UACZC,KAAK,OACLC,SAde,SAAAL,GAAM,IACjBM,EAAUN,EAAEO,OAAZD,MACRP,EAAQO,IAaJA,MAAOR,IAET,4BAAQI,KAAK,SAASM,UAAWb,GAAjC,YChBAc,E,OAASC,EAAGC,QAAQ,yBAoEXC,MAlEf,WAAgB,IAAD,EACWhB,IAAMC,SAAS,IAD1B,mBACNO,EADM,KACAS,EADA,OAEejB,IAAMC,UAAS,GAF9B,mBAENF,EAFM,KAEEmB,EAFF,OAGalB,IAAMC,SAAS,IAH5B,mBAGNkB,EAHM,KAGCC,EAHD,KAwBPC,EAAe,SAAAnB,GACnB,IAAMoB,EAAQH,EAAMI,WAClB,SAAAC,GAAC,OAAIA,EAAEhB,OAASN,EAAKM,MAAQgB,EAAEtB,OAASA,EAAKA,QAE/CW,EAAOY,KAAK,SAAUH,IAmBxB,OAhBAtB,IAAM0B,WAAU,WACdb,EAAOc,GAAG,QAAQ,SAAAzB,GAChBkB,GAAS,SAAAQ,GAAS,4BAAQA,GAAR,CAAmB1B,UAEvCW,EAAOc,GAAG,UAAU,SAAAL,GAClBF,GAAS,SAAAQ,GAAS,OAAIA,EAAUC,QAAO,SAAC3B,EAAM4B,GAAP,OAAaA,IAAMR,aAE3D,CAACT,IAUF,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACEtB,SAZa,SAAAL,GACnB4B,QAAQC,IAAI7B,EAAEO,OAAOH,KAAMJ,EAAEO,OAAOD,OACpCO,EAAQb,EAAEO,OAAOD,QAWXH,YAAY,UACZK,SAAUb,EACVW,MAAOF,IAET,4BAAQ0B,QAbK,WACjBhB,GAAU,kBAAM,MAYiBN,SAAUb,GAAvC,YAGA,kBAAC,EAAD,CAAMD,SAvDS,SAAAI,GACnBW,EAAOY,KAAK,OAAQ,CAAEjB,OAAMN,UAsDMH,OAAQA,IACtC,mBApDe,kBACnBoB,EAAMgB,KAAI,gBAASC,EAAT,EAAG5B,KAAiBN,EAApB,EAAoBA,KAApB,OACR,yBAAKmC,IAAKC,KAAKC,UACb,wBAAIR,UAAWvB,IAAS4B,GAAa,UAClC,IADH,cAEcA,GAEd,oCAAUlC,GACTM,IAAS4B,GACR,4BAAQF,QAAS,kBAAMb,EAAa,CAAEb,KAAM4B,EAAWlC,WAAvD,gBA2CF,SCvDYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.97b217e4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Form = ({ onSubmit, isName }) => {\n  const [task, setTask] = React.useState(\"\");\n  const handleChange = e => {\n    const { value } = e.target;\n    setTask(value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(task);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Name...\"\n        name=\"name\"\n        onChange={handleChange}\n        value={task}\n      />\n      <button type=\"submit\" disabled={!isName}>\n        Submit\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\nimport { Form } from \"./components/Form/Form\";\n\nconst socket = io.connect(\"http://localhost:4000\");\n\nfunction App() {\n  const [name, setName] = React.useState(\"\");\n  const [isName, setIsName] = React.useState(false);\n  const [tasks, setTasks] = React.useState([]);\n  const handleSubmit = task => {\n    socket.emit(\"task\", { name, task });\n  };\n\n  const DisplayTasks = () =>\n    tasks.map(({ name: publisher, task }) => (\n      <div key={Math.random()}>\n        <h4 className={name === publisher && \"active\"}>\n          {\" \"}\n          publisher: {publisher}\n        </h4>\n        <p>task: {task}</p>\n        {name === publisher && (\n          <button onClick={() => handleDelete({ name: publisher, task })}>\n            delete\n          </button>\n        )}\n      </div>\n    ));\n\n  const handleDelete = task => {\n    const index = tasks.findIndex(\n      t => t.name === task.name && t.task === task.task\n    );\n    socket.emit(\"delete\", index);\n  };\n\n  React.useEffect(() => {\n    socket.on(\"task\", task => {\n      setTasks(prevState => [...prevState, task]);\n    });\n    socket.on(\"delete\", index => {\n      setTasks(prevState => prevState.filter((task, i) => i !== index));\n    });\n  }, [socket]);\n  const handleChange = e => {\n    console.log(e.target.name, e.target.value);\n    setName(e.target.value);\n  };\n  const handleName = () => {\n    setIsName(() => true);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          onChange={handleChange}\n          placeholder=\"Task...\"\n          disabled={isName}\n          value={name}\n        />\n        <button onClick={handleName} disabled={isName}>\n          Set Name\n        </button>\n        <Form onSubmit={handleSubmit} isName={isName} />\n        <DisplayTasks />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}